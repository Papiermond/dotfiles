#+TITLE: Fabian's Emacs Config
#+AUTHOR: Fabian Lerchl

* Use-Package
    #+begin_src emacs-lisp
      (require 'package)
	    (setq package-archives '( ("melpa" . "https://melpa.org/packages/")
				      ("org" . "https://orgmode.org/elpa/")
				      ("elpa" . "https://elpa.gnu.org/packages/") ) )

	    (package-initialize)
	    (unless package-archive-contents
	      (package-refresh-contents))

	    (unless (package-installed-p 'use-package)
	      (package-install 'use-package))

	    (require 'use-package)
	    (setq use-package-always-ensure t)
    #+end_src


** Load Ivy Completion Engine
*** Swiper
    #+begin_src emacs-lisp
      (use-package swiper)
    #+end_src

*** Diminish
    #+begin_src emacs-lisp
      (use-package diminish)
    #+end_src
*** Ivy
    #+begin_src emacs-lisp
	(use-package ivy
	  :diminish
	  :bind ( :map ivy-minibuffer-map
		  ("TAB" . ivy-alt-done)
		  ("C-l" . ivy-alt-done)
		  ("C-j" . ivy-next-line)
		  ("C-k" . ivy-previous-line)
		  :map ivy-switch-buffer-map
		  ("C-k" . ivy-previous-line)
		  ("C-l" . ivy-donr)
		  ("C-d" . ivy-switch-buffer-kill)
		  :map ivy-reverse-i-search-map
		  ("C-k" . ivy-previous-line)
		  ("C-d" . ivy-reverse-i-search-kill) )
	  :config
	  (ivy-mode 1) )
	(require 'ivy)
	(require 'swiper)
	(require 'diminish)
    #+end_src
*** Ivy-Rich
    #+begin_src emacs-lisp
      (use-package ivy-rich
	:init
	(ivy-rich-mode 1) )
    #+end_src
** Counsel
    #+begin_src emacs-lisp
      (use-package counsel
	:bind ( ("M-x" . counsel-M-x)
		("C-x b" . counsel-ibuffer)
		:map minibuffer-local-map
		("C-r" . 'counsel-minibuffer-history) ) )
    #+end_src
** NerdIcons
    #+begin_src emacs-lisp
      (use-package nerd-icons)
      (use-package nerd-icons-completion
	  :config
	  (nerd-icons-completion-mode))
      (use-package nerd-icons-ibuffer
	  :ensure t
	  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
      (use-package nerd-icons-ivy-rich
	  :ensure t
	  :init
	  (nerd-icons-ivy-rich-mode 1)
	  (ivy-rich-mode 1))
      (use-package nerd-icons-dired
          :hook
          (dired-mode . nerd-icons-dired-mode))
    #+end_src
** Mode Line
    #+begin_src emacs-lisp
      (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1)
	:config
	(setq doom-modeline-icon t)
	(setq doom-modeline-major-mode-color-icon t)
	(setq doom-modeline-buffer-state-icon t)
	(setq doom-modeline-buffer-modification-icon t)
	(setq doom-modeline-lsp-icon t)
	(setq doom-modeline-time-icon t)
	(setq doom-modeline-height 50)
      )
    #+end_src
** Which key
    #+begin_src emacs-lisp
      (use-package which-key
	:init (which-key-mode)
        :diminish which-key-mode
        :config
	(setq which-key-idle-delay 0.3) )
    #+end_src
** Rainbow delimiters
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode) )
    #+end_src
** Theme-Packages
    #+begin_src emacs-lisp
      (use-package doom-themes)
      (use-package catppuccin-theme)
      (load-theme 'catppuccin t)
    #+end_src

* UI CleanUp
** Menu bar
    #+begin_src emacs-lisp
      (setq inhibit-startup-message  t)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (tooltip-mode -1)
      (set-fringe-mode 10)
      (menu-bar-mode -1)
      (setq visible-bell t)
    #+end_src
** Font
    #+begin_src emacs-lisp
       (set-face-attribute 'default nil :font "0xProtoNerdFont" :height 140)
    #+end_src
** Line Number
    #+begin_src emacs-lisp
      (column-number-mode)
      (global-display-line-numbers-mode t)

      (dolist(mode '(term-mode-hook eshell-mode-hook) )
	(add-hook mode (lambda () (display-line-numbers-mode 0) ) ) )
    #+end_src

* Keybindings
** Global keybindings
    #+begin_src emacs-lisp
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    #+end_src
** General Keybinding
    #+begin_src emacs-lisp
      (use-package general
	:config
	(general-create-definer papier/mond
	  :keymaps '(normal insert visual emacs)
	  :prefix "SPC"
	  :global-prefix "C-SPC"))

      (general-define-key
       "C-b" 'counsel-ibuffer
       "C-f" 'counsel-grep-or-swiper
       "C-p" 'counsel-find-file
       "C-s" 'save-buffer
       "C-z" 'undo
       "C-y" 'undo-redo
       "C-v" 'clipboard-yank
       "C-c c" 'clipboard-kill-ring-save
       "C-x x" 'clipboard-kill-region)
    #+end_src   
